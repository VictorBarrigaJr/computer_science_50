0.  How many differnt colors does each format support?  In their respective 
 standard formats: Windows bitmap (BMP) depends on the number of bits per pixels
 used in the file (1, 2, 4, 8, 16 24, 32), but the 32-bits per pixel format, 
 which represents 2^32 = 4,294,967,296 distict colors per pixel, in a lossless 
 format; Joint Photographic Expert Group (JPEG) file format support 24-bits, 
 which represents 3^24 = 16,777,216 distinct colors per pixel, in a lossy format.
1.  Which of these formats supports animation? Neither BMP file format or JPEG 
 file format support animation.
2.  What's the difference between lossy and lossless compression? Any type of 
 media file such as music, images or video can be stored in lossy or lossless 
 formats. The files in lossy format usually consume a lot less storage space 
 than files in lossless formats. The differnce between the two formats is storage
 space, quality of files, and better support for lossy formats. In the case of 
 image management: Images stored in Windows bitmat (BMP) do not suffer from 
 appreciable loss in quality even after prolonged storage. In Joint Photographic 
 Experts Group (JPEG), however keeps loosing quality even after plolonged 
 storage, and keeps loosing quality with after each save, or edit. This loss is 
 not recoverable. The storage space used by JPEG is incredibly small compared 
 to the size of BMP files, which occupy huge amounts of space even for small 
 files.
3.  Which of these formats is lossy-compressed? JPEG file format is 
 lossy-compressed. 
4.  What happens, techinacally speaking, when a file is deleted on a FAT file 
 system? A File Allocation Table (FAT, FAT12, FAT16, VFAT and FAT32): is a linked
 list of disk clusters that DOS uses to manage space on a random-access device; 
 it comes in 16 or 32 sector numbers (bit length). A hard disk is always arranged
 in 512 byte sectors, which are grouped into clusters. A cluster is either: Part
 of a file, and points to the next cluster of that file; The last cluster in a 
 file, and thus holds a special (EOF); Free and thus zero; Marked defective. 
 Basically, the FAT is a linked list of clusters that correspond to files. 
 Essentially, when you request to delete a file two things occur: First, the 
 system modifies the file by changing the first character in the file's directory 
 to signal that it has been deleted and can be rewritten. Secondly, the system 
 moves the files clusters to the hard drive's list of free clusters. Basically, 
 the actual data is never deleted. The table simply marks the clusters as free, 
 and sooner or later, they are written over.  
5.  What can someone like you do to ensure (with hight probability) that files 
 you delete cannot be recovered? Remove the drive, shred it, burn it, and then 
 throw then sprinkel the ashes over the ocean! Actually, one can ensure that 
 files cannot be recovered by sanitizing the data (overwriting the data). One 
 way to overwrite a hard disk is to fill every addressable block with ASCII NUL 
 bytes (zeroes). On read-back, the drive will report that each of these blocks 
 is filled with NUL's. Overwiting a disk with a few random passes will 
 sufficiently sanitize it.    
6.  What's stdint.h? It is a header file in the C standard library. It helps 
 write more portable code by providing a set of typedefs that specify 
 exact-width (having an exact specified number of bits) integer types, and also 
 defines a corresponding set of macros with minimum and maximum allowable for 
 each type.    
7.  What's the point of using unit_8, unit32_t, int32_t, and unit16_t in 
 program? Those structures (unit_8, unit32_t, int32_t, and unit16), represent
 exact-width interger types (intN_t and unitN_t)in the stdint.h file. They 
 represent exactly N bits with no padding bits.    
8.  How many bytes is a BYTE, a LONG, and a WORD, respectively? (Assume a 32-bit
 architecture like the CS50 Appliance.) The byte is a unit of digital 
 information commonly consisting of eight bits. A BYTE is equal to one BYTE, 8 
 bits. A LONG is 4 BYTES, 32 bits. A WORD is 4 BYTES, 32 bits.  
9.  What (in ASCII, decimal, or hexadecimal) must the first two bytes of any BMP
 file be? (Leading bytes used to identify file formats (with high probability) 
 are generally called "magic numbers"). The header field used to identify a BMP 
file in hexadecimal is 0x42 0x4D, which is 'B' 'M' in ASCII. 
10. What's the difference between bfSize and biSize? The biSize is part of the 
 BITMAPINFOHEADER structure (contains the dimensions and color format), and it 
 provides the number of bytes required by the structure. The bfSize is part of 
 the BITMAPFILEHEADER structure (contains type, size, and layout of the file), 
 and it contains is the size, in bytes, of the bitmap file.
11. What does it mean if biHeight is negative? First of all, biHeight provides 
 the height of the bitmap, in pixels. It provides this information in two ways. 
 If it is positive,the bitmap is bottom-up, and its origin is the lower-left 
 corner. If it is negative, the bitmap is top-down, and its origin is the 
 upper-left corner. It also cannot be compressed.  
12. What field in BITMAPINFOHEADER specifies the BMP's color depth (i.e. bits 
 per pixel)? The number of bits that define each pixel and the maximum number 
 of colors in the bitmap is determined by biBitCount
13. Why might fopen return NULL in copy.c:37? The function fopen, in copy.c 
 line:37, will return NULL if an error occured while attempting to write to the 
 file, which usually signifying a memory fault: the operating system is out of 
 memory, or the program attempted to write into a part of memory that it does 
 not have access to. 
14. Why is the third argument to fread always 1 in our code?
15. What value does copy.c:70 assign padding if bi.Width is 3?
16. What does fseek do?
17. What is SEEK_CUR?
18. Whodunit?
